{
  "title": "16 errors, 29 pass in 46m 50s",
  "summary": " 96 files   96 suites   46m 50s ⏱️\n 45 tests  29 ✅ 0 💤 0 ❌ 16 🔥\n155 runs  107 ✅ 0 💤 0 ❌ 48 🔥\n\nResults for commit d85b75c2.\n",
  "conclusion": "failure",
  "stats": {
    "files": 96,
    "errors": [],
    "suites": 96,
    "duration": 2810,
    "suite_details": [
      {
        "name": "validation_hardware_esp32s2_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_psram0",
        "tests": 8,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32h2_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_touch0",
        "tests": 3,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32c6_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s2_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s2_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s2_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32c3_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32h2_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c3_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32h2_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_unity0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_unity0",
        "tests": 2,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_timer0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_psram0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32c6_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32h2_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_fibonacci0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32h2_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_uart0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s2_touch0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32p4_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_nvs3",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32s3_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c6_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32c6_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_nvs0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s2_psram0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_periman0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_ramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s2_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s2_psramspeed0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32p4_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32h2_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32h2_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c6_nvs1",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "performance_hardware_esp32s3_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_hello_world0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32p4_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32h2_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      },
      {
        "name": "validation_hardware_esp32c3_timer0",
        "tests": 4,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_linpack_float0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c3_uart0",
        "tests": 10,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32s3_nvs2",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32p4_touch0",
        "tests": 3,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_linpack_double0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32s3_superpi0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "performance_hardware_esp32c3_coremark0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 0
      },
      {
        "name": "validation_hardware_esp32c6_democfg0",
        "tests": 1,
        "skipped": 0,
        "failures": 0,
        "errors": 1
      }
    ],
    "tests": 45,
    "tests_succ": 29,
    "tests_skip": 0,
    "tests_fail": 0,
    "tests_error": 16,
    "runs": 155,
    "runs_succ": 107,
    "runs_skip": 0,
    "runs_fail": 0,
    "runs_error": 48,
    "commit": "d85b75c2196533eb728b6a59e321d600ac57f0dc"
  },
  "annotations": [
    {
      "path": "validation.timer.test_timer",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/timer/esp32c6/timer.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/timer/esp32h2/timer.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/timer/esp32s2/timer.xml [took 3s]",
      "title": "All 3 runs with error: test_timer (validation.timer.test_timer)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f588a19d0f0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f588a19c130>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f588a1968c0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f588a19d600>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f588a19cfd0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f588a19c130>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_11-02-54-199989/test_timer', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.psramspeed.test_psramspeed",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/psramspeed/esp32s2/psramspeed.xml [took 3s]",
      "title": "1 out of 3 runs with error: test_psramspeed (performance.psramspeed.test_psramspeed)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f07d538d2d0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f07d538c310>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f07d5386d40>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f07d538d7e0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f07d538d1b0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f07d538c310>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_10-55-52-227207/test_psramspeed', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyS0', '/dev/ttyUSB0']\nports = ['/dev/ttyS0', '/dev/ttyUSB0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.ramspeed.test_ramspeed",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32c6/ramspeed.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32h2/ramspeed.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/ramspeed/esp32s2/ramspeed.xml [took 3s]",
      "title": "3 out of 6 runs with error: test_ramspeed (performance.ramspeed.test_ramspeed)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f75cdb41270>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f75cdb402b0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f75cdb3a950>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f75cdb41780>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f75cdb41150>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f75cdb402b0>\ntarget = 'esp32c6', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_10-55-33-992715/test_ramspeed', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyS0', '/dev/ttyUSB0']\nports = ['/dev/ttyS0', '/dev/ttyUSB0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.democfg.test_democfg",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/democfg/esp32c6/democfg.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/democfg/esp32s2/democfg.xml [took 3s]",
      "title": "2 out of 3 runs with error: test_cfg (validation.democfg.test_democfg)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7fa144635180>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fa1446341c0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fa14462a830>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fa144635690>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fa144635060>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fa1446341c0>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_11-01-21-262103/test_cfg', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.nvs.test_nvs",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/nvs/esp32c6/nvs0.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32c6/nvs1.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32c6/nvs2.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32c6/nvs3.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32h2/nvs0.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32h2/nvs1.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32h2/nvs2.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32h2/nvs3.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s2/nvs0.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/nvs/esp32s2/nvs1.xml [took 3s]",
      "title": "10 out of 19 runs with error: test_nvs (validation.nvs.test_nvs)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f00a5531150>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f00a5530190>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f00a55228c0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f00a5531660>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f00a5531030>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f00a5530190>\ntarget = 'esp32h2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_10-59-22-480603/test_nvs', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.periman.test_periman",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/periman/esp32c6/periman.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/periman/esp32h2/periman.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/periman/esp32s2/periman.xml [took 3s]",
      "title": "3 out of 5 runs with error: test_periman (validation.periman.test_periman)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f7c15a2d0f0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f7c15a2c130>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f7c15a22830>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f7c15a2d600>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f7c15a2cfd0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f7c15a2c130>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_11-02-23-248594/test_periman', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.coremark.test_coremark",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/coremark/esp32c6/coremark.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/coremark/esp32h2/coremark.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/coremark/esp32s2/coremark.xml [took 3s]",
      "title": "3 out of 6 runs with error: test_coremark (performance.coremark.test_coremark)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f1f588392a0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f1f588382e0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f1f58836950>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f1f588397b0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f1f58839180>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f1f588382e0>\ntarget = 'esp32c6', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_10-54-31-743906/test_coremark', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyS0', '/dev/ttyUSB0']\nports = ['/dev/ttyS0', '/dev/ttyUSB0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.uart.test_uart",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/uart/esp32c6/uart.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/uart/esp32h2/uart.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/uart/esp32s2/uart.xml [took 3s]",
      "title": "All 3 runs with error: test_uart (validation.uart.test_uart)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7faf0a3f91b0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7faf0a3f81f0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7faf0a3ee8c0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7faf0a3f96c0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7faf0a3f9090>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7faf0a3f81f0>\ntarget = 'esp32c6', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_11-01-03-858021/test_uart', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.hello_world.test_hello_world",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32c6/hello_world.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32h2/hello_world.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/hello_world/esp32s2/hello_world.xml [took 3s]",
      "title": "3 out of 6 runs with error: test_hello_world (validation.hello_world.test_hello_world)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f1da417d210>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f1da417c250>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f1da4172dd0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f1da417d720>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f1da417d0f0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f1da417c250>\ntarget = 'esp32c6', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_10-59-15-325232/test_hello_world', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.fibonacci.test_fibonacci",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32c6/fibonacci.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32h2/fibonacci.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/fibonacci/esp32s2/fibonacci.xml [took 3s]",
      "title": "3 out of 6 runs with error: test_fibonacci (performance.fibonacci.test_fibonacci)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f2a552c1270>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f2a552c02b0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f2a552bea70>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f2a552c1780>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f2a552c1150>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f2a552c02b0>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_10-55-05-713677/test_fibonacci', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyS0', '/dev/ttyUSB0']\nports = ['/dev/ttyS0', '/dev/ttyUSB0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.superpi.test_superpi",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/superpi/esp32c6/superpi.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/superpi/esp32h2/superpi.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/superpi/esp32s2/superpi.xml [took 3s]",
      "title": "3 out of 6 runs with error: test_superpi (performance.superpi.test_superpi)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f93a73bd270>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f93a73bc2b0>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f93a73b67a0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f93a73bd780>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f93a73bd150>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f93a73bc2b0>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_10-56-23-252162/test_superpi', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyS0', '/dev/ttyUSB0']\nports = ['/dev/ttyS0', '/dev/ttyUSB0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.linpack_float.test_linpack_float",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32c6/linpack_float.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32h2/linpack_float.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_float/esp32s2/linpack_float.xml [took 3s]",
      "title": "3 out of 6 runs with error: test_linpack_float (performance.linpack_float.test_linpack_float)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7ff5958a5240>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7ff5958a4280>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7ff595896d40>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7ff5958a5750>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7ff5958a5120>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7ff5958a4280>\ntarget = 'esp32c6', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_10-55-18-348163/test_linpack_float', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyS0', '/dev/ttyUSB0']\nports = ['/dev/ttyS0', '/dev/ttyUSB0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "performance.linpack_double.test_linpack_double",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32c6/linpack_double.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32h2/linpack_double.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/performance/linpack_double/esp32s2/linpack_double.xml [took 3s]",
      "title": "3 out of 6 runs with error: test_linpack_double (performance.linpack_double.test_linpack_double)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f554ceed2d0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f554ceec310>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f554cee2d40>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f554ceed7e0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f554ceed1b0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f554ceec310>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_10-55-21-241108/test_linpack_double', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}\navailable_ports = ['/dev/ttyS0', '/dev/ttyUSB0']\nports = ['/dev/ttyS0', '/dev/ttyUSB0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.unity.test_unity",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/unity/esp32c6/unity.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/unity/esp32h2/unity.xml [took 3s]\n./artifacts/parent-artifacts/results/hw/validation/unity/esp32s2/unity.xml [took 3s]",
      "title": "All 3 runs with error: test_unity (validation.unity.test_unity)",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7fe58f9b91e0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7fe58f9b8220>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7fe58f9ae8c0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7fe58f9b96f0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7fe58f9b90c0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7fe58f9b8220>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_11-03-40-732230/test_unity', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.touch.test_touch",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/touch/esp32s2/touch.xml [took 3s]",
      "title": "test_touch (validation.touch.test_touch) with error",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f0f999e11e0>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f0f999e0220>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f0f999d68c0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f0f999e16f0>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f0f999e10c0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f0f999e0220>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_11-03-09-732616/test_touch', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": "validation.psram.test_psram",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "failure",
      "message": "./artifacts/parent-artifacts/results/hw/validation/psram/esp32s2/psram.xml [took 3s]",
      "title": "test_psram (validation.psram.test_psram) with error",
      "raw_details": "failed on setup with \"ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\"\nargs = ()\nkwargs = {'_fixture_classes_and_options': ClassCliOptions(classes={'app': <class 'pytest_embedded_arduino.app.ArduinoApp'>, 'se...ino.app.ArduinoApp object at 0x7f6da857d210>, 'msg_queue': <pytest_embedded.log.MessageQueue object at 0x7f6da857c250>}\n_close_or_terminate = <function multi_dut_generator_fixture.<locals>.wrapper.<locals>._close_or_terminate at 0x7f6da85728c0>\nres = None\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        def _close_or_terminate(obj):\n            if obj is None:\n                del obj\n                return\n    \n            try:\n                if isinstance(obj, (subprocess.Popen, multiprocessing.process.BaseProcess)):\n                    obj.terminate()\n                    obj.kill()\n                elif isinstance(obj, io.IOBase):\n                    try:\n                        obj.close()\n                    except Exception as e:\n                        logging.debug('file %s closed failed with error: %s', obj, str(e))\n                else:\n                    try:\n                        obj.close()\n                    except AttributeError:\n                        try:\n                            obj.terminate()\n                        except AttributeError:\n                            pass\n                    except Exception as e:\n                        logging.debug('Not properly caught object %s: %s', obj, str(e))\n            except Exception as e:\n                logging.debug('%s: %s', obj, str(e))\n                return  # swallow up all error\n            finally:\n                referrers = gc.get_referrers(obj)\n                for _referrer in referrers:\n                    if isinstance(_referrer, list):\n                        for _i, val in enumerate(_referrer):\n                            if val is obj:\n                                _referrer[_i] = None\n                    elif isinstance(_referrer, dict):\n                        for key, value in _referrer.items():\n                            if value is obj:\n                                _referrer[key] = None\n                del obj\n    \n        if _COUNT == 1:\n            res = None\n            try:\n>               res = func(*args, **kwargs)\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:499: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/site-packages/pytest_embedded/plugin.py:1120: in serial\n    return serial_gn(**locals())\n/usr/local/lib/python3.10/site-packages/pytest_embedded/dut_factory.py:466: in serial_gn\n    return cls(**_drop_none_kwargs(kwargs))\n/usr/local/lib/python3.10/site-packages/pytest_embedded_arduino/serial.py:26: in __init__\n    super().__init__(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pytest_embedded_arduino.serial.ArduinoSerial object at 0x7f6da857d720>\npexpect_proc = <pytest_embedded.log.PexpectProcess object at 0x7f6da857d0f0>\nmsg_queue = <pytest_embedded.log.MessageQueue object at 0x7f6da857c250>\ntarget = 'esp32s2', beta_target = None, port = None, port_mac = None\nbaud = 115200, esptool_baud = 921600, esp_flash_force = False\nskip_autoflash = False, erase_all = False\nmeta = Meta(logdir='/tmp/pytest-embedded/2025-05-25_11-02-38-774108/test_psram', port_target_cache={}, port_app_cache={}, logfile_extension='.log')\nports_to_occupy = (), kwargs = {}, available_ports = ['/dev/ttyS0']\nports = ['/dev/ttyS0']\n\n    def __init__(\n        self,\n        pexpect_proc: PexpectProcess,\n        msg_queue: MessageQueue,\n        target: Optional[str] = None,\n        beta_target: Optional[str] = None,\n        port: Optional[str] = None,\n        port_mac: Optional[str] = None,\n        baud: int = Serial.DEFAULT_BAUDRATE,\n        esptool_baud: int = ESPTOOL_DEFAULT_BAUDRATE,\n        esp_flash_force: bool = False,\n        skip_autoflash: bool = False,\n        erase_all: bool = False,\n        meta: Optional[Meta] = None,\n        ports_to_occupy: List[str] = (),\n        **kwargs,\n    ) -> None:\n        self._meta = meta\n    \n        esptool_target = beta_target or target or 'auto'\n        if port is None or port.endswith('*'):\n            port_filter = port.strip('*') if port else ''\n            available_ports = [_p for _p in esptool.get_port_list() if port_filter in _p]\n            ports = list(set(available_ports) - set(self.occupied_ports.keys()) - set(ports_to_occupy))\n    \n            # sort to make /dev/ttyS* ports before /dev/ttyUSB* ports\n            # esptool will reverse the list\n            ports.sort()\n            if port_mac:\n                for port in ports:\n                    if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                        ports = [port]\n                        break\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} cannot be found.')\n    \n            # prioritize the cache recorded target port\n            if esptool_target and self._meta:\n                ports.sort(key=lambda x: self._meta.hit_port_target_cache(x, esptool_target))\n    \n            logging.debug(f'Detecting ports from {\", \".join(ports)}')\n        else:\n            if port_mac:\n                if _is_port_mac_verified(pexpect_proc, port, port_mac, msg_queue):\n                    ports = [port]\n                else:\n                    raise ValueError(f'The specified MAC address {port_mac} binds with different port, not with {port}')\n            else:\n                ports = [port]\n    \n        # normal loader\n        if esptool_target not in ['auto', *ESPTOOL_CHIPS]:\n            raise ValueError(\n                f'esptool version {ESPTOOL_VERSION} not support target {esptool_target}\\n'\n                f'Supported targets: {ESPTOOL_CHIPS}'\n            )\n    \n        with contextlib.redirect_stdout(msg_queue):\n            self.esp = esptool.get_default_connected_device(\n                ports,\n                port=port,\n                connect_attempts=3,\n                initial_baud=baud,\n                chip=esptool_target,\n            )\n    \n        if not self.esp:\n>           raise ValueError('Couldn\\'t auto detect chip. Please manually specify with \"--port\"')\nE           ValueError: Couldn't auto detect chip. Please manually specify with \"--port\"\n\n/usr/local/lib/python3.10/site-packages/pytest_embedded_serial_esp/serial.py:118: ValueError"
    },
    {
      "path": ".github",
      "start_line": 0,
      "end_line": 0,
      "annotation_level": "notice",
      "message": "There are 45 tests, see \"Raw output\" for the full list of tests.",
      "title": "45 tests found",
      "raw_details": "basic_transmission_test\nbegin_when_running_test\nchange_baudrate_test\nchange_cpu_frequency_test\nchange_pins_test\ndisabled_uart_calls_test\nenabled_uart_calls_test\nend_when_stopped_test\nperformance.coremark.test_coremark ‑ test_coremark\nperformance.fibonacci.test_fibonacci ‑ test_fibonacci\nperformance.linpack_double.test_linpack_double ‑ test_linpack_double\nperformance.linpack_float.test_linpack_float ‑ test_linpack_float\nperformance.psramspeed.test_psramspeed ‑ test_psramspeed\nperformance.ramspeed.test_ramspeed ‑ test_ramspeed\nperformance.superpi.test_superpi ‑ test_superpi\nperiman_test\npsram_found\nresize_buffers_test\ntest_calloc_success\ntest_fail\ntest_malloc_fail\ntest_malloc_success\ntest_memcpy\ntest_memset_all_ones\ntest_memset_all_zeroes\ntest_memset_alternating\ntest_memset_random\ntest_pass\ntest_realloc_success\ntest_touch_errors\ntest_touch_interrtupt\ntest_touch_read\ntimer_clock_select_test\ntimer_divider_test\ntimer_interrupt_test\ntimer_read_test\nvalidation.democfg.test_democfg ‑ test_cfg\nvalidation.hello_world.test_hello_world ‑ test_hello_world\nvalidation.nvs.test_nvs ‑ test_nvs\nvalidation.periman.test_periman ‑ test_periman\nvalidation.psram.test_psram ‑ test_psram\nvalidation.timer.test_timer ‑ test_timer\nvalidation.touch.test_touch ‑ test_touch\nvalidation.uart.test_uart ‑ test_uart\nvalidation.unity.test_unity ‑ test_unity"
    }
  ],
  "check_url": "https://github.com/espressif/arduino-esp32/runs/42869993963",
  "formatted": {
    "stats": {
      "files": "96",
      "errors": [],
      "suites": "96",
      "duration": "2 810",
      "suite_details": [
        {
          "name": "validation_hardware_esp32s2_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_psram0",
          "tests": 8,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32h2_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_touch0",
          "tests": 3,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32c6_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s2_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s2_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s2_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32c3_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32h2_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c3_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32h2_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_unity0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_unity0",
          "tests": 2,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_timer0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_psram0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32c6_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32h2_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_fibonacci0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32h2_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_uart0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s2_touch0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32p4_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_nvs3",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32s3_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c6_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32c6_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_nvs0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s2_psram0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_periman0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_ramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s2_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s2_psramspeed0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32p4_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32h2_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32h2_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c6_nvs1",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "performance_hardware_esp32s3_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_hello_world0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32p4_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32h2_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        },
        {
          "name": "validation_hardware_esp32c3_timer0",
          "tests": 4,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_linpack_float0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c3_uart0",
          "tests": 10,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32s3_nvs2",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32p4_touch0",
          "tests": 3,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_linpack_double0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32s3_superpi0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "performance_hardware_esp32c3_coremark0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 0
        },
        {
          "name": "validation_hardware_esp32c6_democfg0",
          "tests": 1,
          "skipped": 0,
          "failures": 0,
          "errors": 1
        }
      ],
      "tests": "45",
      "tests_succ": "29",
      "tests_skip": "0",
      "tests_fail": "0",
      "tests_error": "16",
      "runs": "155",
      "runs_succ": "107",
      "runs_skip": "0",
      "runs_fail": "0",
      "runs_error": "48",
      "commit": "d85b75c2196533eb728b6a59e321d600ac57f0dc"
    }
  }
}